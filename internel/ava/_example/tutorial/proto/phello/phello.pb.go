// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/phello/phello.proto

package phello

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	ava "vinesai/internel/ava"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// request params.
type SayReq struct {
	Ping string `protobuf:"bytes,1,opt,name=ping,proto3" json:"ping,omitempty"`
}

func (m *SayReq) Reset()         { *m = SayReq{} }
func (m *SayReq) String() string { return proto.CompactTextString(m) }
func (*SayReq) ProtoMessage()    {}
func (*SayReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a01dda070618850, []int{0}
}
func (m *SayReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SayReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SayReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SayReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SayReq.Merge(m, src)
}
func (m *SayReq) XXX_Size() int {
	return m.Size()
}
func (m *SayReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SayReq.DiscardUnknown(m)
}

var xxx_messageInfo_SayReq proto.InternalMessageInfo

func (m *SayReq) GetPing() string {
	if m != nil {
		return m.Ping
	}
	return ""
}

// response content.
type SayRsp struct {
	Pong string `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
}

func (m *SayRsp) Reset()         { *m = SayRsp{} }
func (m *SayRsp) String() string { return proto.CompactTextString(m) }
func (*SayRsp) ProtoMessage()    {}
func (*SayRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a01dda070618850, []int{1}
}
func (m *SayRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SayRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SayRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SayRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SayRsp.Merge(m, src)
}
func (m *SayRsp) XXX_Size() int {
	return m.Size()
}
func (m *SayRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_SayRsp.DiscardUnknown(m)
}

var xxx_messageInfo_SayRsp proto.InternalMessageInfo

func (m *SayRsp) GetPong() string {
	if m != nil {
		return m.Pong
	}
	return ""
}

type HttpApiReq struct {
	// params is URL query url.Values
	Params map[string]string `protobuf:"bytes,1,rep,name=params,proto3" json:"params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *HttpApiReq) Reset()         { *m = HttpApiReq{} }
func (m *HttpApiReq) String() string { return proto.CompactTextString(m) }
func (*HttpApiReq) ProtoMessage()    {}
func (*HttpApiReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a01dda070618850, []int{2}
}
func (m *HttpApiReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HttpApiReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HttpApiReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HttpApiReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HttpApiReq.Merge(m, src)
}
func (m *HttpApiReq) XXX_Size() int {
	return m.Size()
}
func (m *HttpApiReq) XXX_DiscardUnknown() {
	xxx_messageInfo_HttpApiReq.DiscardUnknown(m)
}

var xxx_messageInfo_HttpApiReq proto.InternalMessageInfo

func (m *HttpApiReq) GetParams() map[string]string {
	if m != nil {
		return m.Params
	}
	return nil
}

type HttpApiRsp struct {
	Code int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data string `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *HttpApiRsp) Reset()         { *m = HttpApiRsp{} }
func (m *HttpApiRsp) String() string { return proto.CompactTextString(m) }
func (*HttpApiRsp) ProtoMessage()    {}
func (*HttpApiRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a01dda070618850, []int{3}
}
func (m *HttpApiRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HttpApiRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HttpApiRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HttpApiRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HttpApiRsp.Merge(m, src)
}
func (m *HttpApiRsp) XXX_Size() int {
	return m.Size()
}
func (m *HttpApiRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_HttpApiRsp.DiscardUnknown(m)
}

var xxx_messageInfo_HttpApiRsp proto.InternalMessageInfo

func (m *HttpApiRsp) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *HttpApiRsp) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *HttpApiRsp) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

// FileReq must equals to vinesai/internel/ava/parcel/packet/parcel.proto FileReq
type HttpFileReq struct {
	FileName string `protobuf:"bytes,1,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	FileSize int64  `protobuf:"varint,2,opt,name=file_size,json=fileSize,proto3" json:"file_size,omitempty"`
	Body     []byte `protobuf:"bytes,3,opt,name=body,proto3" json:"body,omitempty"`
}

func (m *HttpFileReq) Reset()         { *m = HttpFileReq{} }
func (m *HttpFileReq) String() string { return proto.CompactTextString(m) }
func (*HttpFileReq) ProtoMessage()    {}
func (*HttpFileReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a01dda070618850, []int{4}
}
func (m *HttpFileReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HttpFileReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HttpFileReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HttpFileReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HttpFileReq.Merge(m, src)
}
func (m *HttpFileReq) XXX_Size() int {
	return m.Size()
}
func (m *HttpFileReq) XXX_DiscardUnknown() {
	xxx_messageInfo_HttpFileReq.DiscardUnknown(m)
}

var xxx_messageInfo_HttpFileReq proto.InternalMessageInfo

func (m *HttpFileReq) GetFileName() string {
	if m != nil {
		return m.FileName
	}
	return ""
}

func (m *HttpFileReq) GetFileSize() int64 {
	if m != nil {
		return m.FileSize
	}
	return 0
}

func (m *HttpFileReq) GetBody() []byte {
	if m != nil {
		return m.Body
	}
	return nil
}

type HttpFileRsp struct {
	Code uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *HttpFileRsp) Reset()         { *m = HttpFileRsp{} }
func (m *HttpFileRsp) String() string { return proto.CompactTextString(m) }
func (*HttpFileRsp) ProtoMessage()    {}
func (*HttpFileRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a01dda070618850, []int{5}
}
func (m *HttpFileRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HttpFileRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HttpFileRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HttpFileRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HttpFileRsp.Merge(m, src)
}
func (m *HttpFileRsp) XXX_Size() int {
	return m.Size()
}
func (m *HttpFileRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_HttpFileRsp.DiscardUnknown(m)
}

var xxx_messageInfo_HttpFileRsp proto.InternalMessageInfo

func (m *HttpFileRsp) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *HttpFileRsp) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func init() {
	proto.RegisterType((*SayReq)(nil), "phello.SayReq")
	proto.RegisterType((*SayRsp)(nil), "phello.SayRsp")
	proto.RegisterType((*HttpApiReq)(nil), "phello.HttpApiReq")
	proto.RegisterMapType((map[string]string)(nil), "phello.HttpApiReq.ParamsEntry")
	proto.RegisterType((*HttpApiRsp)(nil), "phello.HttpApiRsp")
	proto.RegisterType((*HttpFileReq)(nil), "phello.HttpFileReq")
	proto.RegisterType((*HttpFileRsp)(nil), "phello.HttpFileRsp")
}

func init() { proto.RegisterFile("proto/phello/phello.proto", fileDescriptor_2a01dda070618850) }

var fileDescriptor_2a01dda070618850 = []byte{
	// 409 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x52, 0x3f, 0x6f, 0xd3, 0x40,
	0x14, 0xf7, 0xc5, 0x89, 0x21, 0x2f, 0x80, 0xd0, 0xc1, 0x60, 0x0c, 0xb2, 0x22, 0x0f, 0x90, 0x01,
	0x9c, 0xc8, 0x41, 0x08, 0xd8, 0x00, 0x11, 0x65, 0x42, 0xc8, 0x56, 0xa7, 0x0e, 0xd5, 0xa5, 0xbe,
	0x26, 0x56, 0xcf, 0xf6, 0xd5, 0x76, 0x23, 0x39, 0x4b, 0xbf, 0x42, 0x3e, 0x56, 0xc7, 0x8c, 0x1d,
	0xab, 0xe4, 0x8b, 0x54, 0x77, 0xe7, 0x34, 0x6e, 0xa3, 0x2a, 0x93, 0xdf, 0xfd, 0xfe, 0xbc, 0xfb,
	0x3d, 0xbf, 0x83, 0x77, 0x3c, 0x4b, 0x8b, 0xb4, 0xcf, 0x67, 0x94, 0xb1, 0xed, 0xc7, 0x95, 0x18,
	0x36, 0xd4, 0xc9, 0xf9, 0x00, 0x46, 0x40, 0x4a, 0x9f, 0x5e, 0x60, 0x0c, 0x4d, 0x1e, 0x25, 0x53,
	0x13, 0x75, 0x51, 0xaf, 0xed, 0xcb, 0x7a, 0xcb, 0xe6, 0x5c, 0xb2, 0x69, 0x8d, 0x4d, 0x93, 0xa9,
	0x73, 0x05, 0x30, 0x2e, 0x0a, 0xfe, 0x8b, 0x47, 0xc2, 0xff, 0x0d, 0x0c, 0x4e, 0x32, 0x12, 0xe7,
	0x26, 0xea, 0xea, 0xbd, 0x8e, 0x67, 0xbb, 0xd5, 0x85, 0x3b, 0x8d, 0xfb, 0x5f, 0x0a, 0xfe, 0x26,
	0x45, 0x56, 0xfa, 0x95, 0xda, 0xfa, 0x01, 0x9d, 0x1a, 0x8c, 0x5f, 0x83, 0x7e, 0x4e, 0xcb, 0xea,
	0x1e, 0x51, 0xe2, 0xb7, 0xd0, 0x9a, 0x13, 0x76, 0x49, 0xcd, 0x86, 0xc4, 0xd4, 0xe1, 0x67, 0xe3,
	0x3b, 0x72, 0x46, 0xbb, 0x00, 0x2a, 0xe2, 0x69, 0x1a, 0x52, 0x69, 0x6d, 0xf9, 0xb2, 0x16, 0xdd,
	0xe2, 0x7c, 0x5a, 0x39, 0x45, 0x29, 0x54, 0x21, 0x29, 0x88, 0xa9, 0xab, 0x41, 0x44, 0xed, 0x1c,
	0x43, 0x47, 0xf4, 0x19, 0x45, 0x8c, 0x8a, 0x49, 0xde, 0x43, 0xfb, 0x2c, 0x62, 0xf4, 0x24, 0x21,
	0x31, 0xad, 0x82, 0x3c, 0x17, 0xc0, 0x3f, 0x12, 0xd3, 0x7b, 0x32, 0x8f, 0x16, 0x2a, 0x91, 0xae,
	0xc8, 0x20, 0x5a, 0x50, 0xd1, 0x7c, 0x92, 0x86, 0xa5, 0x6c, 0xfe, 0xc2, 0x97, 0xb5, 0x33, 0xac,
	0x35, 0x7f, 0x94, 0xf2, 0xe5, 0x53, 0x29, 0xbd, 0x2f, 0xa0, 0x07, 0xa4, 0xc4, 0x1f, 0xa1, 0x31,
	0x8e, 0xf0, 0xab, 0xed, 0x9f, 0x54, 0x9b, 0xb2, 0x1e, 0x9c, 0x73, 0xee, 0x68, 0xde, 0x12, 0xc9,
	0x45, 0x05, 0xd9, 0x1c, 0x7f, 0x52, 0xce, 0x83, 0x1e, 0xfc, 0x19, 0x8c, 0xa0, 0xc8, 0x28, 0x89,
	0x0f, 0x6b, 0x07, 0x08, 0xf7, 0xe1, 0xd9, 0x9f, 0x19, 0x49, 0x12, 0xca, 0x0e, 0xcb, 0x7b, 0x68,
	0x80, 0x3c, 0x06, 0x4d, 0x31, 0x36, 0x76, 0xe5, 0x08, 0x78, 0xff, 0x31, 0x58, 0x7b, 0x98, 0x8c,
	0xf5, 0x15, 0x8c, 0x23, 0xce, 0x52, 0x12, 0xe2, 0x37, 0x75, 0xbe, 0xda, 0x8d, 0xb5, 0x0f, 0x0a,
	0xd7, 0x6f, 0xf3, 0x7a, 0x6d, 0xa3, 0xd5, 0xda, 0x46, 0xb7, 0x6b, 0x1b, 0x2d, 0x37, 0xb6, 0xb6,
	0xda, 0xd8, 0xda, 0xcd, 0xc6, 0xd6, 0x26, 0x86, 0x7c, 0xef, 0xc3, 0xbb, 0x00, 0x00, 0x00, 0xff,
	0xff, 0xb6, 0x16, 0xd3, 0x49, 0x0c, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ ava.Service

// This is a compile-time assertion to ensure that this generated file
// is compatible with the ava package it is being compiled against.
const _ = ava.SupportPackageIsVersion1

type SayClient interface {
	// requestResponse or fireAndForget.
	Hi(c *ava.Context, req *SayReq, opts ...ava.InvokeOptions) (*SayRsp, error)
}

type sayClient struct {
	c *ava.Client
}

func NewSayClient() SayClient {
	return &sayClient{c: ava.AvaClient()}
}

func (cc *sayClient) Hi(c *ava.Context, req *SayReq, opts ...ava.InvokeOptions) (*SayRsp, error) {
	rsp := &SayRsp{}
	err := cc.c.InvokeRR(c, "/say/hi", req, rsp, opts...)
	return rsp, err
}

// SayServer is the server API for Say ava.
type SayServer interface {
	// requestResponse or fireAndForget.
	Hi(c *ava.Context, req *SayReq, rsp *SayRsp)
}

func RegisterSayServer(h SayServer) {
	var r = &sayHandler{h: h}
	ava.AvaServer().RegisterHandler("/"+ava.AvaServer().Name()+"/say/hi", r.Hi)
}

type sayHandler struct {
	h SayServer
}

func (r *sayHandler) Hi(c *ava.Context, req *ava.Packet, interrupt ava.Interceptor) (rsp proto.Message, err error) {
	var in SayReq
	err = c.Codec().Decode(req.Bytes(), &in)
	if err != nil {
		c.Errorf("server decode packet err=%v |method=%s |data=%s", err, c.Metadata.Method(), req.String())
		return nil, err
	}
	var out = SayRsp{}
	if interrupt == nil {
		r.h.Hi(c, &in, &out)
		return &out, err
	}
	f := func(c *ava.Context, req proto.Message) proto.Message {
		r.h.Hi(c, req.(*SayReq), &out)
		return &out
	}
	return interrupt(c, &in, f)
}

type SaySrvClient interface {
	// requestResponse or fireAndForget.
	Say(c *ava.Context, req *SayReq, opts ...ava.InvokeOptions) (*SayRsp, error)
	// requestStream.
	// SayReq is channel params.
	Stream(c *ava.Context, req *SayReq, opts ...ava.InvokeOptions) chan *SayRsp
	// requestChannel.
	// SayReq and SayRsp is channel.
	Channel(c *ava.Context, req chan *SayReq, opts ...ava.InvokeOptions) chan *SayRsp
}

type saySrvClient struct {
	c *ava.Client
}

func NewSaySrvClient() SaySrvClient {
	return &saySrvClient{c: ava.AvaClient()}
}

func (cc *saySrvClient) Say(c *ava.Context, req *SayReq, opts ...ava.InvokeOptions) (*SayRsp, error) {
	rsp := &SayRsp{}
	err := cc.c.InvokeRR(c, "/saysrv/say", req, rsp, opts...)
	return rsp, err
}

func (cc *saySrvClient) Stream(c *ava.Context, req *SayReq, opts ...ava.InvokeOptions) chan *SayRsp {
	data := cc.c.InvokeRS(c, "/saysrv/stream", req, opts...)
	if data == nil {
		return nil
	}

	var rsp = make(chan *SayRsp, cap(data))
	go func() {
		for b := range data {
			v := &SayRsp{}
			err := c.Codec().Decode(b, v)
			if err != nil {
				c.Errorf("client decode pakcet err=%v |method=%s |data=%s", err, c.Metadata.Method(), req.String())
				continue
			}
			rsp <- v
		}
		close(rsp)
	}()
	return rsp
}

func (cc *saySrvClient) Channel(c *ava.Context, req chan *SayReq, opts ...ava.InvokeOptions) chan *SayRsp {
	var in = make(chan []byte, cap(req))
	data := cc.c.InvokeRC(c, "/saysrv/channel", in, opts...)
	if data == nil {
		return nil
	}

	go func() {
		for b := range req {
			v, err := c.Codec().Encode(b)
			if err != nil {
				c.Errorf("client encode pakcet err=%v |method=%s |data=%s", err, c.Metadata.Method(), b.String())
				continue
			}
			in <- v
		}
		close(in)
	}()

	var rsp = make(chan *SayRsp, cap(data))
	go func() {
		for b := range data {
			v := &SayRsp{}
			err := c.Codec().Decode(b, v)
			if err != nil {
				c.Errorf("client decode pakcet err=%v |method=%s |data=%s", err, c.Metadata.Method(), string(b))
				continue
			}
			rsp <- v
		}
		close(rsp)
	}()
	return rsp
}

// SaySrvServer is the server API for SaySrv ava.
type SaySrvServer interface {
	// requestResponse or fireAndForget.
	Say(c *ava.Context, req *SayReq, rsp *SayRsp)
	// requestStream.
	// SayReq is channel params.
	Stream(c *ava.Context, req *SayReq, exit chan struct{}) chan *SayRsp
	// requestChannel.
	// SayReq and SayRsp is channel.
	Channel(c *ava.Context, req chan *SayReq, exit chan struct{}) chan *SayRsp
}

func RegisterSaySrvServer(h SaySrvServer) {
	var r = &saySrvHandler{h: h}
	ava.AvaServer().RegisterHandler("/"+ava.AvaServer().Name()+"/saysrv/say", r.Say)
	ava.AvaServer().RegisterStreamHandler("/"+ava.AvaServer().Name()+"/saysrv/stream", r.Stream)
	ava.AvaServer().RegisterChannelHandler("/"+ava.AvaServer().Name()+"/saysrv/channel", r.Channel)
}

type saySrvHandler struct {
	h SaySrvServer
}

func (r *saySrvHandler) Say(c *ava.Context, req *ava.Packet, interrupt ava.Interceptor) (rsp proto.Message, err error) {
	var in SayReq
	err = c.Codec().Decode(req.Bytes(), &in)
	if err != nil {
		c.Errorf("server decode packet err=%v |method=%s |data=%s", err, c.Metadata.Method(), req.String())
		return nil, err
	}
	var out = SayRsp{}
	if interrupt == nil {
		r.h.Say(c, &in, &out)
		return &out, err
	}
	f := func(c *ava.Context, req proto.Message) proto.Message {
		r.h.Say(c, req.(*SayReq), &out)
		return &out
	}
	return interrupt(c, &in, f)
}

func (r *saySrvHandler) Stream(c *ava.Context, req *ava.Packet, exit chan struct{}) chan proto.Message {
	var in SayReq
	err := c.Codec().Decode(req.Bytes(), &in)
	if err != nil {
		c.Errorf("server decode packet err=%v |method=%s |data=%s", err, c.Metadata.Method(), req.String())
		return nil
	}

	out := r.h.Stream(c, &in, exit)
	if out == nil {
		return nil
	}

	var rsp = make(chan proto.Message, cap(out))

	go func() {
		for d := range out {
			rsp <- d
		}
		close(rsp)
	}()
	return rsp
}

func (r *saySrvHandler) Channel(c *ava.Context, req chan *ava.Packet, exit chan struct{}) chan proto.Message {
	var in = make(chan *SayReq, cap(req))
	out := r.h.Channel(c, in, exit)
	if out == nil {
		return nil
	}

	go func() {
		for b := range req {
			var v = &SayReq{}
			err := c.Codec().Decode(b.Bytes(), v)
			if err != nil {
				c.Errorf("server decode packet err=%v |method=%s |data=%s", err, c.Metadata.Method(), b.String())
				continue
			}
			in <- v
			ava.Recycle(b)
		}
		close(in)
	}()
	var rsp = make(chan proto.Message, cap(out))

	go func() {
		for d := range out {
			rsp <- d
		}
		close(rsp)
	}()
	return rsp
}

type HttpClient interface {
	// get http request api
	Hi(c *ava.Context, req *HttpApiReq, opts ...ava.InvokeOptions) (*HttpApiRsp, error)
	// http upload file
	Upload(c *ava.Context, req *HttpFileReq, opts ...ava.InvokeOptions) (*HttpFileRsp, error)
}

type httpClient struct {
	c *ava.Client
}

func NewHttpClient() HttpClient {
	return &httpClient{c: ava.AvaClient()}
}

func (cc *httpClient) Hi(c *ava.Context, req *HttpApiReq, opts ...ava.InvokeOptions) (*HttpApiRsp, error) {
	rsp := &HttpApiRsp{}
	err := cc.c.InvokeRR(c, "/http/hi", req, rsp, opts...)
	return rsp, err
}

func (cc *httpClient) Upload(c *ava.Context, req *HttpFileReq, opts ...ava.InvokeOptions) (*HttpFileRsp, error) {
	rsp := &HttpFileRsp{}
	err := cc.c.InvokeRR(c, "/http/upload", req, rsp, opts...)
	return rsp, err
}

// HttpServer is the server API for Http ava.
type HttpServer interface {
	// get http request api
	Hi(c *ava.Context, req *HttpApiReq, rsp *HttpApiRsp)
	// http upload file
	Upload(c *ava.Context, req *HttpFileReq, rsp *HttpFileRsp)
}

func RegisterHttpServer(h HttpServer) {
	var r = &httpHandler{h: h}
	ava.AvaServer().RegisterHandler("/"+ava.AvaServer().Name()+"/http/hi", r.Hi)
	ava.AvaServer().RegisterHandler("/"+ava.AvaServer().Name()+"/http/upload", r.Upload)
}

type httpHandler struct {
	h HttpServer
}

func (r *httpHandler) Hi(c *ava.Context, req *ava.Packet, interrupt ava.Interceptor) (rsp proto.Message, err error) {
	var in HttpApiReq
	err = c.Codec().Decode(req.Bytes(), &in)
	if err != nil {
		c.Errorf("server decode packet err=%v |method=%s |data=%s", err, c.Metadata.Method(), req.String())
		return nil, err
	}
	var out = HttpApiRsp{}
	if interrupt == nil {
		r.h.Hi(c, &in, &out)
		return &out, err
	}
	f := func(c *ava.Context, req proto.Message) proto.Message {
		r.h.Hi(c, req.(*HttpApiReq), &out)
		return &out
	}
	return interrupt(c, &in, f)
}

func (r *httpHandler) Upload(c *ava.Context, req *ava.Packet, interrupt ava.Interceptor) (rsp proto.Message, err error) {
	var in HttpFileReq
	err = c.Codec().Decode(req.Bytes(), &in)
	if err != nil {
		c.Errorf("server decode packet err=%v |method=%s |data=%s", err, c.Metadata.Method(), req.String())
		return nil, err
	}
	var out = HttpFileRsp{}
	if interrupt == nil {
		r.h.Upload(c, &in, &out)
		return &out, err
	}
	f := func(c *ava.Context, req proto.Message) proto.Message {
		r.h.Upload(c, req.(*HttpFileReq), &out)
		return &out
	}
	return interrupt(c, &in, f)
}

func (m *SayReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SayReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SayReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Ping) > 0 {
		i -= len(m.Ping)
		copy(dAtA[i:], m.Ping)
		i = encodeVarintPhello(dAtA, i, uint64(len(m.Ping)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SayRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SayRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SayRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Pong) > 0 {
		i -= len(m.Pong)
		copy(dAtA[i:], m.Pong)
		i = encodeVarintPhello(dAtA, i, uint64(len(m.Pong)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *HttpApiReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HttpApiReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HttpApiReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Params) > 0 {
		for k := range m.Params {
			v := m.Params[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintPhello(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintPhello(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintPhello(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *HttpApiRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HttpApiRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HttpApiRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintPhello(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Msg) > 0 {
		i -= len(m.Msg)
		copy(dAtA[i:], m.Msg)
		i = encodeVarintPhello(dAtA, i, uint64(len(m.Msg)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintPhello(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *HttpFileReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HttpFileReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HttpFileReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Body) > 0 {
		i -= len(m.Body)
		copy(dAtA[i:], m.Body)
		i = encodeVarintPhello(dAtA, i, uint64(len(m.Body)))
		i--
		dAtA[i] = 0x1a
	}
	if m.FileSize != 0 {
		i = encodeVarintPhello(dAtA, i, uint64(m.FileSize))
		i--
		dAtA[i] = 0x10
	}
	if len(m.FileName) > 0 {
		i -= len(m.FileName)
		copy(dAtA[i:], m.FileName)
		i = encodeVarintPhello(dAtA, i, uint64(len(m.FileName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *HttpFileRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HttpFileRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HttpFileRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Msg) > 0 {
		i -= len(m.Msg)
		copy(dAtA[i:], m.Msg)
		i = encodeVarintPhello(dAtA, i, uint64(len(m.Msg)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintPhello(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintPhello(dAtA []byte, offset int, v uint64) int {
	offset -= sovPhello(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SayReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Ping)
	if l > 0 {
		n += 1 + l + sovPhello(uint64(l))
	}
	return n
}

func (m *SayRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Pong)
	if l > 0 {
		n += 1 + l + sovPhello(uint64(l))
	}
	return n
}

func (m *HttpApiReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Params) > 0 {
		for k, v := range m.Params {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovPhello(uint64(len(k))) + 1 + len(v) + sovPhello(uint64(len(v)))
			n += mapEntrySize + 1 + sovPhello(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *HttpApiRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovPhello(uint64(m.Code))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovPhello(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovPhello(uint64(l))
	}
	return n
}

func (m *HttpFileReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FileName)
	if l > 0 {
		n += 1 + l + sovPhello(uint64(l))
	}
	if m.FileSize != 0 {
		n += 1 + sovPhello(uint64(m.FileSize))
	}
	l = len(m.Body)
	if l > 0 {
		n += 1 + l + sovPhello(uint64(l))
	}
	return n
}

func (m *HttpFileRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovPhello(uint64(m.Code))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovPhello(uint64(l))
	}
	return n
}

func sovPhello(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPhello(x uint64) (n int) {
	return sovPhello(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SayReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPhello
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SayReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SayReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ping", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhello
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPhello
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPhello
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ping = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPhello(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPhello
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SayRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPhello
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SayRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SayRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pong", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhello
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPhello
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPhello
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pong = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPhello(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPhello
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HttpApiReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPhello
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HttpApiReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HttpApiReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhello
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPhello
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPhello
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Params == nil {
				m.Params = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPhello
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPhello
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthPhello
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthPhello
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPhello
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthPhello
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthPhello
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipPhello(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthPhello
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Params[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPhello(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPhello
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HttpApiRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPhello
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HttpApiRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HttpApiRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhello
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhello
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPhello
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPhello
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Categories", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhello
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPhello
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPhello
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPhello(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPhello
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HttpFileReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPhello
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HttpFileReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HttpFileReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhello
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPhello
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPhello
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileSize", wireType)
			}
			m.FileSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhello
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FileSize |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Body", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhello
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPhello
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPhello
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Body = append(m.Body[:0], dAtA[iNdEx:postIndex]...)
			if m.Body == nil {
				m.Body = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPhello(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPhello
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HttpFileRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPhello
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HttpFileRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HttpFileRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhello
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhello
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPhello
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPhello
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPhello(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPhello
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPhello(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPhello
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPhello
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPhello
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPhello
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPhello
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPhello
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPhello        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPhello          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPhello = fmt.Errorf("proto: unexpected end of group")
)
