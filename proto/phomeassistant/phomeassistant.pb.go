// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/phomeassistant/phomeassistant.proto

package ptuya

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	ava "vinesai/internel/ava"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type AskReq struct {
	Content  string `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	DeviceId string `protobuf:"bytes,2,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	UserId   string `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	HomeId   string `protobuf:"bytes,4,opt,name=home_id,json=homeId,proto3" json:"home_id,omitempty"`
	Phone    string `protobuf:"bytes,5,opt,name=phone,proto3" json:"phone,omitempty"`
	Mac      string `protobuf:"bytes,6,opt,name=mac,proto3" json:"mac,omitempty"`
	Path     string `protobuf:"bytes,7,opt,name=path,proto3" json:"path,omitempty"`
}

func (m *AskReq) Reset()         { *m = AskReq{} }
func (m *AskReq) String() string { return proto.CompactTextString(m) }
func (*AskReq) ProtoMessage()    {}
func (*AskReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_6f727fe4ac38caf2, []int{0}
}
func (m *AskReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AskReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AskReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AskReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AskReq.Merge(m, src)
}
func (m *AskReq) XXX_Size() int {
	return m.Size()
}
func (m *AskReq) XXX_DiscardUnknown() {
	xxx_messageInfo_AskReq.DiscardUnknown(m)
}

var xxx_messageInfo_AskReq proto.InternalMessageInfo

func (m *AskReq) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *AskReq) GetDeviceId() string {
	if m != nil {
		return m.DeviceId
	}
	return ""
}

func (m *AskReq) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *AskReq) GetHomeId() string {
	if m != nil {
		return m.HomeId
	}
	return ""
}

func (m *AskReq) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *AskReq) GetMac() string {
	if m != nil {
		return m.Mac
	}
	return ""
}

func (m *AskReq) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

type ChatRspData struct {
	Content string `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
}

func (m *ChatRspData) Reset()         { *m = ChatRspData{} }
func (m *ChatRspData) String() string { return proto.CompactTextString(m) }
func (*ChatRspData) ProtoMessage()    {}
func (*ChatRspData) Descriptor() ([]byte, []int) {
	return fileDescriptor_6f727fe4ac38caf2, []int{1}
}
func (m *ChatRspData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChatRspData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChatRspData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChatRspData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChatRspData.Merge(m, src)
}
func (m *ChatRspData) XXX_Size() int {
	return m.Size()
}
func (m *ChatRspData) XXX_DiscardUnknown() {
	xxx_messageInfo_ChatRspData.DiscardUnknown(m)
}

var xxx_messageInfo_ChatRspData proto.InternalMessageInfo

func (m *ChatRspData) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

type ChatRsp struct {
	Code int32        `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string       `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data *ChatRspData `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *ChatRsp) Reset()         { *m = ChatRsp{} }
func (m *ChatRsp) String() string { return proto.CompactTextString(m) }
func (*ChatRsp) ProtoMessage()    {}
func (*ChatRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_6f727fe4ac38caf2, []int{2}
}
func (m *ChatRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChatRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChatRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChatRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChatRsp.Merge(m, src)
}
func (m *ChatRsp) XXX_Size() int {
	return m.Size()
}
func (m *ChatRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_ChatRsp.DiscardUnknown(m)
}

var xxx_messageInfo_ChatRsp proto.InternalMessageInfo

func (m *ChatRsp) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *ChatRsp) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *ChatRsp) GetData() *ChatRspData {
	if m != nil {
		return m.Data
	}
	return nil
}

type StreamReq struct {
	DeviceId string `protobuf:"bytes,2,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	UserId   string `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	HomeId   string `protobuf:"bytes,4,opt,name=home_id,json=homeId,proto3" json:"home_id,omitempty"`
	Phone    string `protobuf:"bytes,5,opt,name=phone,proto3" json:"phone,omitempty"`
}

func (m *StreamReq) Reset()         { *m = StreamReq{} }
func (m *StreamReq) String() string { return proto.CompactTextString(m) }
func (*StreamReq) ProtoMessage()    {}
func (*StreamReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_6f727fe4ac38caf2, []int{3}
}
func (m *StreamReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StreamReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StreamReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StreamReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamReq.Merge(m, src)
}
func (m *StreamReq) XXX_Size() int {
	return m.Size()
}
func (m *StreamReq) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamReq.DiscardUnknown(m)
}

var xxx_messageInfo_StreamReq proto.InternalMessageInfo

func (m *StreamReq) GetDeviceId() string {
	if m != nil {
		return m.DeviceId
	}
	return ""
}

func (m *StreamReq) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *StreamReq) GetHomeId() string {
	if m != nil {
		return m.HomeId
	}
	return ""
}

func (m *StreamReq) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

type StreamRsp struct {
	Code int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *StreamRsp) Reset()         { *m = StreamRsp{} }
func (m *StreamRsp) String() string { return proto.CompactTextString(m) }
func (*StreamRsp) ProtoMessage()    {}
func (*StreamRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_6f727fe4ac38caf2, []int{4}
}
func (m *StreamRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StreamRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StreamRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StreamRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamRsp.Merge(m, src)
}
func (m *StreamRsp) XXX_Size() int {
	return m.Size()
}
func (m *StreamRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamRsp.DiscardUnknown(m)
}

var xxx_messageInfo_StreamRsp proto.InternalMessageInfo

func (m *StreamRsp) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *StreamRsp) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type LogReq struct {
	TraceId  string `protobuf:"bytes,1,opt,name=trace_id,json=traceId,proto3" json:"trace_id,omitempty"`
	Content  string `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	Merchant string `protobuf:"bytes,3,opt,name=merchant,proto3" json:"merchant,omitempty"`
}

func (m *LogReq) Reset()         { *m = LogReq{} }
func (m *LogReq) String() string { return proto.CompactTextString(m) }
func (*LogReq) ProtoMessage()    {}
func (*LogReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_6f727fe4ac38caf2, []int{5}
}
func (m *LogReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LogReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LogReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LogReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogReq.Merge(m, src)
}
func (m *LogReq) XXX_Size() int {
	return m.Size()
}
func (m *LogReq) XXX_DiscardUnknown() {
	xxx_messageInfo_LogReq.DiscardUnknown(m)
}

var xxx_messageInfo_LogReq proto.InternalMessageInfo

func (m *LogReq) GetTraceId() string {
	if m != nil {
		return m.TraceId
	}
	return ""
}

func (m *LogReq) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *LogReq) GetMerchant() string {
	if m != nil {
		return m.Merchant
	}
	return ""
}

type LogRsp struct {
	Code int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *LogRsp) Reset()         { *m = LogRsp{} }
func (m *LogRsp) String() string { return proto.CompactTextString(m) }
func (*LogRsp) ProtoMessage()    {}
func (*LogRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_6f727fe4ac38caf2, []int{6}
}
func (m *LogRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LogRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LogRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LogRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogRsp.Merge(m, src)
}
func (m *LogRsp) XXX_Size() int {
	return m.Size()
}
func (m *LogRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_LogRsp.DiscardUnknown(m)
}

var xxx_messageInfo_LogRsp proto.InternalMessageInfo

func (m *LogRsp) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *LogRsp) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type HttpFileReq struct {
	FileName string `protobuf:"bytes,1,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	FileSize int64  `protobuf:"varint,2,opt,name=file_size,json=fileSize,proto3" json:"file_size,omitempty"`
	Body     []byte `protobuf:"bytes,3,opt,name=body,proto3" json:"body,omitempty"`
}

func (m *HttpFileReq) Reset()         { *m = HttpFileReq{} }
func (m *HttpFileReq) String() string { return proto.CompactTextString(m) }
func (*HttpFileReq) ProtoMessage()    {}
func (*HttpFileReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_6f727fe4ac38caf2, []int{7}
}
func (m *HttpFileReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HttpFileReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HttpFileReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HttpFileReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HttpFileReq.Merge(m, src)
}
func (m *HttpFileReq) XXX_Size() int {
	return m.Size()
}
func (m *HttpFileReq) XXX_DiscardUnknown() {
	xxx_messageInfo_HttpFileReq.DiscardUnknown(m)
}

var xxx_messageInfo_HttpFileReq proto.InternalMessageInfo

func (m *HttpFileReq) GetFileName() string {
	if m != nil {
		return m.FileName
	}
	return ""
}

func (m *HttpFileReq) GetFileSize() int64 {
	if m != nil {
		return m.FileSize
	}
	return 0
}

func (m *HttpFileReq) GetBody() []byte {
	if m != nil {
		return m.Body
	}
	return nil
}

type HttpFileData struct {
	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
}

func (m *HttpFileData) Reset()         { *m = HttpFileData{} }
func (m *HttpFileData) String() string { return proto.CompactTextString(m) }
func (*HttpFileData) ProtoMessage()    {}
func (*HttpFileData) Descriptor() ([]byte, []int) {
	return fileDescriptor_6f727fe4ac38caf2, []int{8}
}
func (m *HttpFileData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HttpFileData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HttpFileData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HttpFileData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HttpFileData.Merge(m, src)
}
func (m *HttpFileData) XXX_Size() int {
	return m.Size()
}
func (m *HttpFileData) XXX_DiscardUnknown() {
	xxx_messageInfo_HttpFileData.DiscardUnknown(m)
}

var xxx_messageInfo_HttpFileData proto.InternalMessageInfo

func (m *HttpFileData) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

type HttpFileRsp struct {
	Code uint32       `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string       `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data *ChatRspData `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *HttpFileRsp) Reset()         { *m = HttpFileRsp{} }
func (m *HttpFileRsp) String() string { return proto.CompactTextString(m) }
func (*HttpFileRsp) ProtoMessage()    {}
func (*HttpFileRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_6f727fe4ac38caf2, []int{9}
}
func (m *HttpFileRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HttpFileRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HttpFileRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HttpFileRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HttpFileRsp.Merge(m, src)
}
func (m *HttpFileRsp) XXX_Size() int {
	return m.Size()
}
func (m *HttpFileRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_HttpFileRsp.DiscardUnknown(m)
}

var xxx_messageInfo_HttpFileRsp proto.InternalMessageInfo

func (m *HttpFileRsp) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *HttpFileRsp) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *HttpFileRsp) GetData() *ChatRspData {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*AskReq)(nil), "ptuya.AskReq")
	proto.RegisterType((*ChatRspData)(nil), "ptuya.chatRspData")
	proto.RegisterType((*ChatRsp)(nil), "ptuya.ChatRsp")
	proto.RegisterType((*StreamReq)(nil), "ptuya.StreamReq")
	proto.RegisterType((*StreamRsp)(nil), "ptuya.StreamRsp")
	proto.RegisterType((*LogReq)(nil), "ptuya.LogReq")
	proto.RegisterType((*LogRsp)(nil), "ptuya.LogRsp")
	proto.RegisterType((*HttpFileReq)(nil), "ptuya.HttpFileReq")
	proto.RegisterType((*HttpFileData)(nil), "ptuya.httpFileData")
	proto.RegisterType((*HttpFileRsp)(nil), "ptuya.HttpFileRsp")
}

func init() {
	proto.RegisterFile("proto/phomeassistant/phomeassistant.proto", fileDescriptor_6f727fe4ac38caf2)
}

var fileDescriptor_6f727fe4ac38caf2 = []byte{
	// 498 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x54, 0xd1, 0x6a, 0xd4, 0x40,
	0x14, 0xdd, 0x69, 0x76, 0x93, 0xed, 0xdd, 0x56, 0xca, 0x20, 0x18, 0x23, 0x04, 0x19, 0xb0, 0xd6,
	0x97, 0x55, 0xb7, 0x5f, 0x50, 0x15, 0x71, 0xa1, 0x88, 0xa4, 0x88, 0x88, 0x0f, 0x65, 0x36, 0x19,
	0x37, 0xa1, 0x9b, 0x4c, 0xcc, 0xcc, 0x0a, 0xed, 0x57, 0xf8, 0x23, 0xfe, 0x82, 0xcf, 0x3e, 0xf6,
	0xd1, 0x47, 0xd9, 0xfd, 0x11, 0x99, 0x3b, 0xb3, 0x21, 0xae, 0x08, 0x05, 0xc1, 0xb7, 0x7b, 0xee,
	0xb9, 0x73, 0xef, 0x99, 0x3b, 0x27, 0x81, 0x47, 0x75, 0x23, 0xb5, 0x7c, 0x5c, 0xe7, 0xb2, 0x14,
	0x5c, 0xa9, 0x42, 0x69, 0x5e, 0xe9, 0x2d, 0x38, 0xc6, 0x1a, 0x3a, 0xa8, 0xf5, 0xf2, 0x92, 0xb3,
	0xaf, 0x04, 0xfc, 0x13, 0x75, 0x91, 0x88, 0x4f, 0x34, 0x84, 0x20, 0x95, 0x95, 0x16, 0x95, 0x0e,
	0xc9, 0x7d, 0x72, 0xb4, 0x9b, 0x6c, 0x20, 0xbd, 0x07, 0xbb, 0x99, 0xf8, 0x5c, 0xa4, 0xe2, 0xbc,
	0xc8, 0xc2, 0x1d, 0xe4, 0x86, 0x36, 0x31, 0xcd, 0xe8, 0x1d, 0x08, 0x96, 0x4a, 0x34, 0x86, 0xf2,
	0x90, 0xf2, 0x0d, 0xb4, 0x84, 0x19, 0x6c, 0x88, 0xbe, 0x25, 0x0c, 0x9c, 0x66, 0xf4, 0x36, 0x0c,
	0xea, 0x5c, 0x56, 0x22, 0x1c, 0x60, 0xda, 0x02, 0x7a, 0x00, 0x5e, 0xc9, 0xd3, 0xd0, 0xc7, 0x9c,
	0x09, 0x29, 0x85, 0x7e, 0xcd, 0x75, 0x1e, 0x06, 0x98, 0xc2, 0x98, 0x3d, 0x84, 0x51, 0x9a, 0x73,
	0x9d, 0xa8, 0xfa, 0x05, 0xd7, 0xfc, 0xef, 0x9a, 0xd9, 0x3b, 0x08, 0x9e, 0xdb, 0x42, 0xd3, 0x27,
	0x95, 0x99, 0xc0, 0x8a, 0x41, 0x82, 0x31, 0x4e, 0x53, 0x73, 0x77, 0x19, 0x13, 0xd2, 0x43, 0xe8,
	0x67, 0x5c, 0x73, 0xbc, 0xc4, 0x68, 0x42, 0xc7, 0xb8, 0x9f, 0x71, 0x67, 0x58, 0x82, 0x3c, 0xab,
	0x61, 0xf7, 0x4c, 0x37, 0x82, 0x97, 0x66, 0x67, 0xff, 0x63, 0x33, 0xec, 0x69, 0x3b, 0xf1, 0xa6,
	0x97, 0x61, 0xef, 0xc1, 0x3f, 0x95, 0x73, 0xa3, 0xf0, 0x2e, 0x0c, 0x75, 0xc3, 0xad, 0x40, 0xb7,
	0x22, 0xc4, 0xd3, 0xac, 0xbb, 0xbc, 0x9d, 0xdf, 0x1f, 0x3c, 0x82, 0x61, 0x29, 0x9a, 0x34, 0xe7,
	0x95, 0x76, 0xd2, 0x5b, 0xcc, 0xc6, 0xb6, 0xf5, 0x8d, 0xa5, 0x7c, 0x80, 0xd1, 0x2b, 0xad, 0xeb,
	0x97, 0xc5, 0x42, 0xb8, 0x8d, 0x7d, 0x2c, 0x16, 0xe2, 0xbc, 0xe2, 0xa5, 0x70, 0x82, 0x86, 0x26,
	0xf1, 0x9a, 0x97, 0xa2, 0x25, 0x55, 0x71, 0x25, 0xb0, 0x87, 0x67, 0xc9, 0xb3, 0xe2, 0x4a, 0x98,
	0x71, 0x33, 0x99, 0x5d, 0xa2, 0xa0, 0xbd, 0x04, 0x63, 0xc6, 0x60, 0x2f, 0x77, 0xcd, 0xd1, 0x0f,
	0x1b, 0xcb, 0x90, 0x8e, 0x65, 0xba, 0x02, 0xb6, 0x54, 0xef, 0xff, 0xab, 0x1b, 0x26, 0xdf, 0x08,
	0xf4, 0x8d, 0xcf, 0xe8, 0x21, 0x78, 0x27, 0xea, 0x82, 0xee, 0xbb, 0x4a, 0xfb, 0x4d, 0x45, 0xb7,
	0x1c, 0x74, 0x56, 0x64, 0x3d, 0x7a, 0x0c, 0xc1, 0x9b, 0xe5, 0x6c, 0x51, 0xa8, 0x9c, 0x1e, 0x38,
	0xb2, 0xb5, 0x53, 0xb4, 0x95, 0x31, 0x07, 0x8e, 0xc8, 0x13, 0x42, 0x1f, 0x80, 0x77, 0x2a, 0xe7,
	0x6d, 0x73, 0xfb, 0xb4, 0x51, 0x17, 0x62, 0xef, 0x09, 0xf8, 0x6f, 0xeb, 0x85, 0xe4, 0x19, 0xdd,
	0x08, 0xee, 0x6c, 0x3e, 0xfa, 0x23, 0x67, 0xce, 0x3c, 0x0b, 0xbf, 0xaf, 0x62, 0x72, 0xbd, 0x8a,
	0xc9, 0xcf, 0x55, 0x4c, 0xbe, 0xac, 0xe3, 0xde, 0xf5, 0x3a, 0xee, 0xfd, 0x58, 0xc7, 0xbd, 0x99,
	0x8f, 0x3f, 0x8a, 0xe3, 0x5f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x89, 0xe4, 0xb5, 0x5a, 0x55, 0x04,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ ava.Service

// This is a compile-time assertion to ensure that this generated file
// is compatible with the ava package it is being compiled against.
const _ = ava.SupportPackageIsVersion1

type ChatClient interface {
	Ask(c *ava.Context, req *AskReq, opts ...ava.InvokeOptions) (*ChatRsp, error)
	Publish(c *ava.Context, req chan *StreamReq, opts ...ava.InvokeOptions) chan *StreamRsp
	Log(c *ava.Context, req *LogReq, opts ...ava.InvokeOptions) (*LogRsp, error)
	Upload(c *ava.Context, req *HttpFileReq, opts ...ava.InvokeOptions) (*HttpFileRsp, error)
}

type chatClient struct {
	c *ava.Client
}

func NewChatClient() ChatClient {
	return &chatClient{c: ava.AvaClient()}
}

func (cc *chatClient) Ask(c *ava.Context, req *AskReq, opts ...ava.InvokeOptions) (*ChatRsp, error) {
	rsp := &ChatRsp{}
	err := cc.c.InvokeRR(c, "/chat/ask", req, rsp, opts...)
	return rsp, err
}

func (cc *chatClient) Publish(c *ava.Context, req chan *StreamReq, opts ...ava.InvokeOptions) chan *StreamRsp {
	var in = make(chan []byte, cap(req))
	data := cc.c.InvokeRC(c, "/chat/publish", in, opts...)
	if data == nil {
		return nil
	}

	go func() {
		for b := range req {
			v, err := c.Codec().Encode(b)
			if err != nil {
				c.Errorf("client encode pakcet err=%v |method=%s |data=%s", err, c.Metadata.Method(), b.String())
				continue
			}
			in <- v
		}
		close(in)
	}()

	var rsp = make(chan *StreamRsp, cap(data))
	go func() {
		for b := range data {
			v := &StreamRsp{}
			err := c.Codec().Decode(b, v)
			if err != nil {
				c.Errorf("client decode pakcet err=%v |method=%s |data=%s", err, c.Metadata.Method(), string(b))
				continue
			}
			rsp <- v
		}
		close(rsp)
	}()
	return rsp
}

func (cc *chatClient) Log(c *ava.Context, req *LogReq, opts ...ava.InvokeOptions) (*LogRsp, error) {
	rsp := &LogRsp{}
	err := cc.c.InvokeRR(c, "/chat/log", req, rsp, opts...)
	return rsp, err
}

func (cc *chatClient) Upload(c *ava.Context, req *HttpFileReq, opts ...ava.InvokeOptions) (*HttpFileRsp, error) {
	rsp := &HttpFileRsp{}
	err := cc.c.InvokeRR(c, "/chat/upload", req, rsp, opts...)
	return rsp, err
}

// ChatServer is the server API for Chat ava.
type ChatServer interface {
	Ask(c *ava.Context, req *AskReq, rsp *ChatRsp)
	Publish(c *ava.Context, req chan *StreamReq, exit chan struct{}) chan *StreamRsp
	Log(c *ava.Context, req *LogReq, rsp *LogRsp)
	Upload(c *ava.Context, req *HttpFileReq, rsp *HttpFileRsp)
}

func RegisterChatServer(h ChatServer) {
	var r = &chatHandler{h: h}
	ava.AvaServer().RegisterHandler("/"+ava.AvaServer().Name()+"/chat/ask", r.Ask)
	ava.AvaServer().RegisterChannelHandler("/"+ava.AvaServer().Name()+"/chat/publish", r.Publish)
	ava.AvaServer().RegisterHandler("/"+ava.AvaServer().Name()+"/chat/log", r.Log)
	ava.AvaServer().RegisterHandler("/"+ava.AvaServer().Name()+"/chat/upload", r.Upload)
}

type chatHandler struct {
	h ChatServer
}

func (r *chatHandler) Ask(c *ava.Context, req *ava.Packet, interrupt ava.Interceptor) (rsp proto.Message, err error) {
	var in AskReq
	err = c.Codec().Decode(req.Bytes(), &in)
	if err != nil {
		c.Errorf("server decode packet err=%v |method=%s |data=%s", err, c.Metadata.Method(), req.String())
		return nil, err
	}
	var out = ChatRsp{}
	if interrupt == nil {
		r.h.Ask(c, &in, &out)
		return &out, err
	}
	f := func(c *ava.Context, req proto.Message) proto.Message {
		r.h.Ask(c, req.(*AskReq), &out)
		return &out
	}
	return interrupt(c, &in, f)
}

func (r *chatHandler) Publish(c *ava.Context, req chan *ava.Packet, exit chan struct{}) chan proto.Message {
	var in = make(chan *StreamReq, cap(req))
	out := r.h.Publish(c, in, exit)
	if out == nil {
		return nil
	}

	go func() {
		for b := range req {
			var v = &StreamReq{}
			err := c.Codec().Decode(b.Bytes(), v)
			if err != nil {
				c.Errorf("server decode packet err=%v |method=%s |data=%s", err, c.Metadata.Method(), b.String())
				continue
			}
			in <- v
			ava.Recycle(b)
		}
		close(in)
	}()
	var rsp = make(chan proto.Message, cap(out))

	go func() {
		for d := range out {
			rsp <- d
		}
		close(rsp)
	}()
	return rsp
}

func (r *chatHandler) Log(c *ava.Context, req *ava.Packet, interrupt ava.Interceptor) (rsp proto.Message, err error) {
	var in LogReq
	err = c.Codec().Decode(req.Bytes(), &in)
	if err != nil {
		c.Errorf("server decode packet err=%v |method=%s |data=%s", err, c.Metadata.Method(), req.String())
		return nil, err
	}
	var out = LogRsp{}
	if interrupt == nil {
		r.h.Log(c, &in, &out)
		return &out, err
	}
	f := func(c *ava.Context, req proto.Message) proto.Message {
		r.h.Log(c, req.(*LogReq), &out)
		return &out
	}
	return interrupt(c, &in, f)
}

func (r *chatHandler) Upload(c *ava.Context, req *ava.Packet, interrupt ava.Interceptor) (rsp proto.Message, err error) {
	var in HttpFileReq
	err = c.Codec().Decode(req.Bytes(), &in)
	if err != nil {
		c.Errorf("server decode packet err=%v |method=%s |data=%s", err, c.Metadata.Method(), req.String())
		return nil, err
	}
	var out = HttpFileRsp{}
	if interrupt == nil {
		r.h.Upload(c, &in, &out)
		return &out, err
	}
	f := func(c *ava.Context, req proto.Message) proto.Message {
		r.h.Upload(c, req.(*HttpFileReq), &out)
		return &out
	}
	return interrupt(c, &in, f)
}

func (m *AskReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AskReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AskReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Path) > 0 {
		i -= len(m.Path)
		copy(dAtA[i:], m.Path)
		i = encodeVarintPhomeassistant(dAtA, i, uint64(len(m.Path)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Mac) > 0 {
		i -= len(m.Mac)
		copy(dAtA[i:], m.Mac)
		i = encodeVarintPhomeassistant(dAtA, i, uint64(len(m.Mac)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Phone) > 0 {
		i -= len(m.Phone)
		copy(dAtA[i:], m.Phone)
		i = encodeVarintPhomeassistant(dAtA, i, uint64(len(m.Phone)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.HomeId) > 0 {
		i -= len(m.HomeId)
		copy(dAtA[i:], m.HomeId)
		i = encodeVarintPhomeassistant(dAtA, i, uint64(len(m.HomeId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.UserId) > 0 {
		i -= len(m.UserId)
		copy(dAtA[i:], m.UserId)
		i = encodeVarintPhomeassistant(dAtA, i, uint64(len(m.UserId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.DeviceId) > 0 {
		i -= len(m.DeviceId)
		copy(dAtA[i:], m.DeviceId)
		i = encodeVarintPhomeassistant(dAtA, i, uint64(len(m.DeviceId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintPhomeassistant(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ChatRspData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChatRspData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChatRspData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintPhomeassistant(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ChatRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChatRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChatRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPhomeassistant(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Msg) > 0 {
		i -= len(m.Msg)
		copy(dAtA[i:], m.Msg)
		i = encodeVarintPhomeassistant(dAtA, i, uint64(len(m.Msg)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintPhomeassistant(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *StreamReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StreamReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StreamReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Phone) > 0 {
		i -= len(m.Phone)
		copy(dAtA[i:], m.Phone)
		i = encodeVarintPhomeassistant(dAtA, i, uint64(len(m.Phone)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.HomeId) > 0 {
		i -= len(m.HomeId)
		copy(dAtA[i:], m.HomeId)
		i = encodeVarintPhomeassistant(dAtA, i, uint64(len(m.HomeId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.UserId) > 0 {
		i -= len(m.UserId)
		copy(dAtA[i:], m.UserId)
		i = encodeVarintPhomeassistant(dAtA, i, uint64(len(m.UserId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.DeviceId) > 0 {
		i -= len(m.DeviceId)
		copy(dAtA[i:], m.DeviceId)
		i = encodeVarintPhomeassistant(dAtA, i, uint64(len(m.DeviceId)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *StreamRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StreamRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StreamRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Msg) > 0 {
		i -= len(m.Msg)
		copy(dAtA[i:], m.Msg)
		i = encodeVarintPhomeassistant(dAtA, i, uint64(len(m.Msg)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintPhomeassistant(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LogReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LogReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Merchant) > 0 {
		i -= len(m.Merchant)
		copy(dAtA[i:], m.Merchant)
		i = encodeVarintPhomeassistant(dAtA, i, uint64(len(m.Merchant)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintPhomeassistant(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.TraceId) > 0 {
		i -= len(m.TraceId)
		copy(dAtA[i:], m.TraceId)
		i = encodeVarintPhomeassistant(dAtA, i, uint64(len(m.TraceId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LogRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LogRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Msg) > 0 {
		i -= len(m.Msg)
		copy(dAtA[i:], m.Msg)
		i = encodeVarintPhomeassistant(dAtA, i, uint64(len(m.Msg)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintPhomeassistant(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *HttpFileReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HttpFileReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HttpFileReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Body) > 0 {
		i -= len(m.Body)
		copy(dAtA[i:], m.Body)
		i = encodeVarintPhomeassistant(dAtA, i, uint64(len(m.Body)))
		i--
		dAtA[i] = 0x1a
	}
	if m.FileSize != 0 {
		i = encodeVarintPhomeassistant(dAtA, i, uint64(m.FileSize))
		i--
		dAtA[i] = 0x10
	}
	if len(m.FileName) > 0 {
		i -= len(m.FileName)
		copy(dAtA[i:], m.FileName)
		i = encodeVarintPhomeassistant(dAtA, i, uint64(len(m.FileName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *HttpFileData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HttpFileData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HttpFileData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Path) > 0 {
		i -= len(m.Path)
		copy(dAtA[i:], m.Path)
		i = encodeVarintPhomeassistant(dAtA, i, uint64(len(m.Path)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *HttpFileRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HttpFileRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HttpFileRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPhomeassistant(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Msg) > 0 {
		i -= len(m.Msg)
		copy(dAtA[i:], m.Msg)
		i = encodeVarintPhomeassistant(dAtA, i, uint64(len(m.Msg)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintPhomeassistant(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintPhomeassistant(dAtA []byte, offset int, v uint64) int {
	offset -= sovPhomeassistant(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AskReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovPhomeassistant(uint64(l))
	}
	l = len(m.DeviceId)
	if l > 0 {
		n += 1 + l + sovPhomeassistant(uint64(l))
	}
	l = len(m.UserId)
	if l > 0 {
		n += 1 + l + sovPhomeassistant(uint64(l))
	}
	l = len(m.HomeId)
	if l > 0 {
		n += 1 + l + sovPhomeassistant(uint64(l))
	}
	l = len(m.Phone)
	if l > 0 {
		n += 1 + l + sovPhomeassistant(uint64(l))
	}
	l = len(m.Mac)
	if l > 0 {
		n += 1 + l + sovPhomeassistant(uint64(l))
	}
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovPhomeassistant(uint64(l))
	}
	return n
}

func (m *ChatRspData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovPhomeassistant(uint64(l))
	}
	return n
}

func (m *ChatRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovPhomeassistant(uint64(m.Code))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovPhomeassistant(uint64(l))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovPhomeassistant(uint64(l))
	}
	return n
}

func (m *StreamReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DeviceId)
	if l > 0 {
		n += 1 + l + sovPhomeassistant(uint64(l))
	}
	l = len(m.UserId)
	if l > 0 {
		n += 1 + l + sovPhomeassistant(uint64(l))
	}
	l = len(m.HomeId)
	if l > 0 {
		n += 1 + l + sovPhomeassistant(uint64(l))
	}
	l = len(m.Phone)
	if l > 0 {
		n += 1 + l + sovPhomeassistant(uint64(l))
	}
	return n
}

func (m *StreamRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovPhomeassistant(uint64(m.Code))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovPhomeassistant(uint64(l))
	}
	return n
}

func (m *LogReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TraceId)
	if l > 0 {
		n += 1 + l + sovPhomeassistant(uint64(l))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovPhomeassistant(uint64(l))
	}
	l = len(m.Merchant)
	if l > 0 {
		n += 1 + l + sovPhomeassistant(uint64(l))
	}
	return n
}

func (m *LogRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovPhomeassistant(uint64(m.Code))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovPhomeassistant(uint64(l))
	}
	return n
}

func (m *HttpFileReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FileName)
	if l > 0 {
		n += 1 + l + sovPhomeassistant(uint64(l))
	}
	if m.FileSize != 0 {
		n += 1 + sovPhomeassistant(uint64(m.FileSize))
	}
	l = len(m.Body)
	if l > 0 {
		n += 1 + l + sovPhomeassistant(uint64(l))
	}
	return n
}

func (m *HttpFileData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovPhomeassistant(uint64(l))
	}
	return n
}

func (m *HttpFileRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovPhomeassistant(uint64(m.Code))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovPhomeassistant(uint64(l))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovPhomeassistant(uint64(l))
	}
	return n
}

func sovPhomeassistant(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPhomeassistant(x uint64) (n int) {
	return sovPhomeassistant(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AskReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPhomeassistant
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AskReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AskReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhomeassistant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPhomeassistant
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPhomeassistant
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhomeassistant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPhomeassistant
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPhomeassistant
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhomeassistant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPhomeassistant
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPhomeassistant
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HomeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhomeassistant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPhomeassistant
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPhomeassistant
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HomeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhomeassistant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPhomeassistant
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPhomeassistant
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mac", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhomeassistant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPhomeassistant
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPhomeassistant
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mac = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhomeassistant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPhomeassistant
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPhomeassistant
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPhomeassistant(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPhomeassistant
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChatRspData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPhomeassistant
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: chatRspData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: chatRspData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhomeassistant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPhomeassistant
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPhomeassistant
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPhomeassistant(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPhomeassistant
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChatRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPhomeassistant
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChatRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChatRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhomeassistant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhomeassistant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPhomeassistant
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPhomeassistant
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhomeassistant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPhomeassistant
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPhomeassistant
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &ChatRspData{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPhomeassistant(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPhomeassistant
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StreamReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPhomeassistant
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StreamReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StreamReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhomeassistant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPhomeassistant
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPhomeassistant
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhomeassistant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPhomeassistant
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPhomeassistant
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HomeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhomeassistant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPhomeassistant
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPhomeassistant
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HomeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhomeassistant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPhomeassistant
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPhomeassistant
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPhomeassistant(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPhomeassistant
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StreamRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPhomeassistant
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StreamRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StreamRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhomeassistant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhomeassistant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPhomeassistant
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPhomeassistant
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPhomeassistant(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPhomeassistant
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LogReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPhomeassistant
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TraceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhomeassistant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPhomeassistant
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPhomeassistant
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TraceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhomeassistant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPhomeassistant
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPhomeassistant
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Merchant", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhomeassistant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPhomeassistant
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPhomeassistant
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Merchant = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPhomeassistant(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPhomeassistant
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LogRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPhomeassistant
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhomeassistant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhomeassistant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPhomeassistant
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPhomeassistant
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPhomeassistant(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPhomeassistant
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HttpFileReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPhomeassistant
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HttpFileReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HttpFileReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhomeassistant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPhomeassistant
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPhomeassistant
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileSize", wireType)
			}
			m.FileSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhomeassistant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FileSize |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Body", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhomeassistant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPhomeassistant
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPhomeassistant
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Body = append(m.Body[:0], dAtA[iNdEx:postIndex]...)
			if m.Body == nil {
				m.Body = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPhomeassistant(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPhomeassistant
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HttpFileData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPhomeassistant
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: httpFileData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: httpFileData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhomeassistant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPhomeassistant
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPhomeassistant
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPhomeassistant(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPhomeassistant
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HttpFileRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPhomeassistant
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HttpFileRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HttpFileRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhomeassistant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhomeassistant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPhomeassistant
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPhomeassistant
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhomeassistant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPhomeassistant
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPhomeassistant
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &ChatRspData{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPhomeassistant(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPhomeassistant
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPhomeassistant(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPhomeassistant
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPhomeassistant
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPhomeassistant
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPhomeassistant
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPhomeassistant
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPhomeassistant
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPhomeassistant        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPhomeassistant          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPhomeassistant = fmt.Errorf("proto: unexpected end of group")
)
