// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/pha/homeassistant.proto

package pha

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	ava "vinesai/internel/ava"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// 设备控制
type CallReq struct {
	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Home    string `protobuf:"bytes,2,opt,name=home,proto3" json:"home,omitempty"`
}

func (m *CallReq) Reset()         { *m = CallReq{} }
func (m *CallReq) String() string { return proto.CompactTextString(m) }
func (*CallReq) ProtoMessage()    {}
func (*CallReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_368ef0c455d86bef, []int{0}
}
func (m *CallReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CallReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CallReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CallReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CallReq.Merge(m, src)
}
func (m *CallReq) XXX_Size() int {
	return m.Size()
}
func (m *CallReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CallReq.DiscardUnknown(m)
}

var xxx_messageInfo_CallReq proto.InternalMessageInfo

func (m *CallReq) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *CallReq) GetHome() string {
	if m != nil {
		return m.Home
	}
	return ""
}

type CallRsp struct {
	Code int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *CallRsp) Reset()         { *m = CallRsp{} }
func (m *CallRsp) String() string { return proto.CompactTextString(m) }
func (*CallRsp) ProtoMessage()    {}
func (*CallRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_368ef0c455d86bef, []int{1}
}
func (m *CallRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CallRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CallRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CallRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CallRsp.Merge(m, src)
}
func (m *CallRsp) XXX_Size() int {
	return m.Size()
}
func (m *CallRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_CallRsp.DiscardUnknown(m)
}

var xxx_messageInfo_CallRsp proto.InternalMessageInfo

func (m *CallRsp) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *CallRsp) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

// 获取指令集
type ServicesReq struct {
}

func (m *ServicesReq) Reset()         { *m = ServicesReq{} }
func (m *ServicesReq) String() string { return proto.CompactTextString(m) }
func (*ServicesReq) ProtoMessage()    {}
func (*ServicesReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_368ef0c455d86bef, []int{2}
}
func (m *ServicesReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServicesReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ServicesReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ServicesReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServicesReq.Merge(m, src)
}
func (m *ServicesReq) XXX_Size() int {
	return m.Size()
}
func (m *ServicesReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ServicesReq.DiscardUnknown(m)
}

var xxx_messageInfo_ServicesReq proto.InternalMessageInfo

type ServicesData struct {
	Services string `protobuf:"bytes,1,opt,name=services,proto3" json:"services,omitempty"`
}

func (m *ServicesData) Reset()         { *m = ServicesData{} }
func (m *ServicesData) String() string { return proto.CompactTextString(m) }
func (*ServicesData) ProtoMessage()    {}
func (*ServicesData) Descriptor() ([]byte, []int) {
	return fileDescriptor_368ef0c455d86bef, []int{3}
}
func (m *ServicesData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServicesData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ServicesData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ServicesData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServicesData.Merge(m, src)
}
func (m *ServicesData) XXX_Size() int {
	return m.Size()
}
func (m *ServicesData) XXX_DiscardUnknown() {
	xxx_messageInfo_ServicesData.DiscardUnknown(m)
}

var xxx_messageInfo_ServicesData proto.InternalMessageInfo

func (m *ServicesData) GetServices() string {
	if m != nil {
		return m.Services
	}
	return ""
}

type ServicesRsp struct {
	Code int32         `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string        `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data *ServicesData `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *ServicesRsp) Reset()         { *m = ServicesRsp{} }
func (m *ServicesRsp) String() string { return proto.CompactTextString(m) }
func (*ServicesRsp) ProtoMessage()    {}
func (*ServicesRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_368ef0c455d86bef, []int{4}
}
func (m *ServicesRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServicesRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ServicesRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ServicesRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServicesRsp.Merge(m, src)
}
func (m *ServicesRsp) XXX_Size() int {
	return m.Size()
}
func (m *ServicesRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_ServicesRsp.DiscardUnknown(m)
}

var xxx_messageInfo_ServicesRsp proto.InternalMessageInfo

func (m *ServicesRsp) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *ServicesRsp) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *ServicesRsp) GetData() *ServicesData {
	if m != nil {
		return m.Data
	}
	return nil
}

// 获取当前设备列表和状态
type StatesReq struct {
}

func (m *StatesReq) Reset()         { *m = StatesReq{} }
func (m *StatesReq) String() string { return proto.CompactTextString(m) }
func (*StatesReq) ProtoMessage()    {}
func (*StatesReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_368ef0c455d86bef, []int{5}
}
func (m *StatesReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StatesReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StatesReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StatesReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatesReq.Merge(m, src)
}
func (m *StatesReq) XXX_Size() int {
	return m.Size()
}
func (m *StatesReq) XXX_DiscardUnknown() {
	xxx_messageInfo_StatesReq.DiscardUnknown(m)
}

var xxx_messageInfo_StatesReq proto.InternalMessageInfo

type StatesData struct {
	States string `protobuf:"bytes,1,opt,name=states,proto3" json:"states,omitempty"`
}

func (m *StatesData) Reset()         { *m = StatesData{} }
func (m *StatesData) String() string { return proto.CompactTextString(m) }
func (*StatesData) ProtoMessage()    {}
func (*StatesData) Descriptor() ([]byte, []int) {
	return fileDescriptor_368ef0c455d86bef, []int{6}
}
func (m *StatesData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StatesData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StatesData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StatesData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatesData.Merge(m, src)
}
func (m *StatesData) XXX_Size() int {
	return m.Size()
}
func (m *StatesData) XXX_DiscardUnknown() {
	xxx_messageInfo_StatesData.DiscardUnknown(m)
}

var xxx_messageInfo_StatesData proto.InternalMessageInfo

func (m *StatesData) GetStates() string {
	if m != nil {
		return m.States
	}
	return ""
}

type StatesRsp struct {
	Code int32       `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string      `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty"`
	Data *StatesData `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *StatesRsp) Reset()         { *m = StatesRsp{} }
func (m *StatesRsp) String() string { return proto.CompactTextString(m) }
func (*StatesRsp) ProtoMessage()    {}
func (*StatesRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_368ef0c455d86bef, []int{7}
}
func (m *StatesRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StatesRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StatesRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StatesRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatesRsp.Merge(m, src)
}
func (m *StatesRsp) XXX_Size() int {
	return m.Size()
}
func (m *StatesRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_StatesRsp.DiscardUnknown(m)
}

var xxx_messageInfo_StatesRsp proto.InternalMessageInfo

func (m *StatesRsp) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *StatesRsp) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *StatesRsp) GetData() *StatesData {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*CallReq)(nil), "pha.CallReq")
	proto.RegisterType((*CallRsp)(nil), "pha.CallRsp")
	proto.RegisterType((*ServicesReq)(nil), "pha.ServicesReq")
	proto.RegisterType((*ServicesData)(nil), "pha.servicesData")
	proto.RegisterType((*ServicesRsp)(nil), "pha.ServicesRsp")
	proto.RegisterType((*StatesReq)(nil), "pha.StatesReq")
	proto.RegisterType((*StatesData)(nil), "pha.statesData")
	proto.RegisterType((*StatesRsp)(nil), "pha.StatesRsp")
}

func init() { proto.RegisterFile("proto/pha/homeassistant.proto", fileDescriptor_368ef0c455d86bef) }

var fileDescriptor_368ef0c455d86bef = []byte{
	// 338 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0x41, 0x4f, 0xea, 0x40,
	0x10, 0x80, 0x59, 0xca, 0x2b, 0x30, 0xf0, 0xde, 0xe3, 0xcd, 0xe1, 0xa5, 0x69, 0x62, 0x43, 0x56,
	0x4c, 0x88, 0x87, 0x92, 0xe0, 0xc1, 0xbb, 0xfa, 0x0b, 0x4a, 0xa2, 0x89, 0xb7, 0x15, 0x36, 0x94,
	0xa4, 0xb5, 0x0b, 0xb3, 0xf1, 0x77, 0xf8, 0x37, 0xfc, 0x27, 0x1e, 0x39, 0x7a, 0x34, 0xf0, 0x47,
	0x4c, 0x77, 0xb7, 0x58, 0x3d, 0x10, 0x6f, 0xf3, 0xcd, 0xec, 0x74, 0xbe, 0xce, 0x2e, 0x9c, 0xa8,
	0x4d, 0xa1, 0x8b, 0x89, 0x4a, 0xc5, 0x24, 0x2d, 0x72, 0x29, 0x88, 0x56, 0xa4, 0xc5, 0xa3, 0x8e,
	0x4d, 0x1e, 0x3d, 0x95, 0x0a, 0x7e, 0x09, 0xed, 0x6b, 0x91, 0x65, 0x89, 0x5c, 0x63, 0x00, 0xed,
	0x5c, 0x12, 0x89, 0xa5, 0x0c, 0xd8, 0x90, 0x8d, 0xbb, 0x49, 0x85, 0x88, 0xd0, 0x2a, 0x3f, 0x10,
	0x34, 0x4d, 0xda, 0xc4, 0x7c, 0xe2, 0x1a, 0x49, 0x95, 0xe5, 0x79, 0xb1, 0xb0, 0x5d, 0xbf, 0x12,
	0x13, 0xe3, 0x00, 0xbc, 0x9c, 0x96, 0xae, 0xa3, 0x0c, 0xf9, 0x6f, 0xe8, 0xcd, 0xe4, 0xe6, 0x69,
	0x35, 0x97, 0x94, 0xc8, 0x35, 0x3f, 0x87, 0x3e, 0x39, 0xbc, 0x11, 0x5a, 0x60, 0x08, 0x9d, 0x8a,
	0xdd, 0xf8, 0x03, 0xf3, 0xfb, 0x5a, 0xeb, 0x4f, 0xe7, 0xe1, 0x19, 0xb4, 0x16, 0x42, 0x8b, 0xc0,
	0x1b, 0xb2, 0x71, 0x6f, 0xfa, 0x2f, 0x56, 0xa9, 0x88, 0xeb, 0x13, 0x13, 0x53, 0xe6, 0x3d, 0xe8,
	0xce, 0xb4, 0xd0, 0x56, 0x6a, 0x04, 0x40, 0x06, 0x8c, 0xd2, 0x7f, 0xf0, 0x2d, 0x39, 0x21, 0x47,
	0xfc, 0xf6, 0xd0, 0x72, 0x5c, 0xc6, 0xfb, 0x94, 0x39, 0x75, 0x32, 0x4d, 0x23, 0xf3, 0xd7, 0xca,
	0x1c, 0x26, 0x59, 0x95, 0xe9, 0x0b, 0x03, 0x2f, 0xcb, 0x72, 0xe4, 0xd0, 0x2a, 0x57, 0x8b, 0x7d,
	0x73, 0xcc, 0x5d, 0x4f, 0x58, 0x23, 0x52, 0x38, 0x02, 0xbf, 0x0c, 0xef, 0xe8, 0xe8, 0xa9, 0x18,
	0x3a, 0xd5, 0xe2, 0x70, 0x60, 0x2a, 0xb5, 0x2b, 0x08, 0xbf, 0x65, 0x48, 0xe1, 0x18, 0x7c, 0xfb,
	0x67, 0xf8, 0xc7, 0xd6, 0xaa, 0xcd, 0x84, 0x5f, 0x98, 0xd4, 0x55, 0xf0, 0xba, 0x8b, 0xd8, 0x76,
	0x17, 0xb1, 0xf7, 0x5d, 0xc4, 0x9e, 0xf7, 0x51, 0x63, 0xbb, 0x8f, 0x1a, 0x6f, 0xfb, 0xa8, 0xf1,
	0xe0, 0x9b, 0xd7, 0x75, 0xf1, 0x11, 0x00, 0x00, 0xff, 0xff, 0x21, 0x7b, 0xf1, 0x16, 0x7e, 0x02,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ ava.Service

// This is a compile-time assertion to ensure that this generated file
// is compatible with the ava package it is being compiled against.
const _ = ava.SupportPackageIsVersion1

type LlmClient interface {
	Call(c *ava.Context, req *CallReq, opts ...ava.InvokeOptions) (*CallRsp, error)
	CallWs(c *ava.Context, req *CallReq, opts ...ava.InvokeOptions) (*CallRsp, error)
	Services(c *ava.Context, req *ServicesReq, opts ...ava.InvokeOptions) (*ServicesRsp, error)
	States(c *ava.Context, req *StatesReq, opts ...ava.InvokeOptions) (*StatesRsp, error)
}

type llmClient struct {
	c *ava.Client
}

func NewLlmClient() LlmClient {
	return &llmClient{c: ava.AvaClient()}
}

func (cc *llmClient) Call(c *ava.Context, req *CallReq, opts ...ava.InvokeOptions) (*CallRsp, error) {
	rsp := &CallRsp{}
	err := cc.c.InvokeRR(c, "/llm/call", req, rsp, opts...)
	return rsp, err
}

func (cc *llmClient) CallWs(c *ava.Context, req *CallReq, opts ...ava.InvokeOptions) (*CallRsp, error) {
	rsp := &CallRsp{}
	err := cc.c.InvokeRR(c, "/llm/callws", req, rsp, opts...)
	return rsp, err
}

func (cc *llmClient) Services(c *ava.Context, req *ServicesReq, opts ...ava.InvokeOptions) (*ServicesRsp, error) {
	rsp := &ServicesRsp{}
	err := cc.c.InvokeRR(c, "/llm/services", req, rsp, opts...)
	return rsp, err
}

func (cc *llmClient) States(c *ava.Context, req *StatesReq, opts ...ava.InvokeOptions) (*StatesRsp, error) {
	rsp := &StatesRsp{}
	err := cc.c.InvokeRR(c, "/llm/states", req, rsp, opts...)
	return rsp, err
}

// LlmServer is the server API for Llm ava.
type LlmServer interface {
	Call(c *ava.Context, req *CallReq, rsp *CallRsp)
	CallWs(c *ava.Context, req *CallReq, rsp *CallRsp)
	Services(c *ava.Context, req *ServicesReq, rsp *ServicesRsp)
	States(c *ava.Context, req *StatesReq, rsp *StatesRsp)
}

func RegisterLlmServer(h LlmServer) {
	var r = &llmHandler{h: h}
	ava.AvaServer().RegisterHandler("/"+ava.AvaServer().Name()+"/llm/call", r.Call)
	ava.AvaServer().RegisterHandler("/"+ava.AvaServer().Name()+"/llm/callws", r.CallWs)
	ava.AvaServer().RegisterHandler("/"+ava.AvaServer().Name()+"/llm/services", r.Services)
	ava.AvaServer().RegisterHandler("/"+ava.AvaServer().Name()+"/llm/states", r.States)
}

type llmHandler struct {
	h LlmServer
}

func (r *llmHandler) Call(c *ava.Context, req *ava.Packet, interrupt ava.Interceptor) (rsp proto.Message, err error) {
	var in CallReq
	err = c.Codec().Decode(req.Bytes(), &in)
	if err != nil {
		c.Errorf("server decode packet err=%v |method=%s |data=%s", err, c.Metadata.Method(), req.String())
		return nil, err
	}
	var out = CallRsp{}
	if interrupt == nil {
		r.h.Call(c, &in, &out)
		return &out, err
	}
	f := func(c *ava.Context, req proto.Message) proto.Message {
		r.h.Call(c, req.(*CallReq), &out)
		return &out
	}
	return interrupt(c, &in, f)
}

func (r *llmHandler) CallWs(c *ava.Context, req *ava.Packet, interrupt ava.Interceptor) (rsp proto.Message, err error) {
	var in CallReq
	err = c.Codec().Decode(req.Bytes(), &in)
	if err != nil {
		c.Errorf("server decode packet err=%v |method=%s |data=%s", err, c.Metadata.Method(), req.String())
		return nil, err
	}
	var out = CallRsp{}
	if interrupt == nil {
		r.h.CallWs(c, &in, &out)
		return &out, err
	}
	f := func(c *ava.Context, req proto.Message) proto.Message {
		r.h.CallWs(c, req.(*CallReq), &out)
		return &out
	}
	return interrupt(c, &in, f)
}

func (r *llmHandler) Services(c *ava.Context, req *ava.Packet, interrupt ava.Interceptor) (rsp proto.Message, err error) {
	var in ServicesReq
	err = c.Codec().Decode(req.Bytes(), &in)
	if err != nil {
		c.Errorf("server decode packet err=%v |method=%s |data=%s", err, c.Metadata.Method(), req.String())
		return nil, err
	}
	var out = ServicesRsp{}
	if interrupt == nil {
		r.h.Services(c, &in, &out)
		return &out, err
	}
	f := func(c *ava.Context, req proto.Message) proto.Message {
		r.h.Services(c, req.(*ServicesReq), &out)
		return &out
	}
	return interrupt(c, &in, f)
}

func (r *llmHandler) States(c *ava.Context, req *ava.Packet, interrupt ava.Interceptor) (rsp proto.Message, err error) {
	var in StatesReq
	err = c.Codec().Decode(req.Bytes(), &in)
	if err != nil {
		c.Errorf("server decode packet err=%v |method=%s |data=%s", err, c.Metadata.Method(), req.String())
		return nil, err
	}
	var out = StatesRsp{}
	if interrupt == nil {
		r.h.States(c, &in, &out)
		return &out, err
	}
	f := func(c *ava.Context, req proto.Message) proto.Message {
		r.h.States(c, req.(*StatesReq), &out)
		return &out
	}
	return interrupt(c, &in, f)
}

func (m *CallReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CallReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CallReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Home) > 0 {
		i -= len(m.Home)
		copy(dAtA[i:], m.Home)
		i = encodeVarintHomeassistant(dAtA, i, uint64(len(m.Home)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintHomeassistant(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CallRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CallRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CallRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Msg) > 0 {
		i -= len(m.Msg)
		copy(dAtA[i:], m.Msg)
		i = encodeVarintHomeassistant(dAtA, i, uint64(len(m.Msg)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintHomeassistant(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ServicesReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServicesReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServicesReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ServicesData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServicesData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServicesData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Services) > 0 {
		i -= len(m.Services)
		copy(dAtA[i:], m.Services)
		i = encodeVarintHomeassistant(dAtA, i, uint64(len(m.Services)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ServicesRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServicesRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServicesRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintHomeassistant(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Msg) > 0 {
		i -= len(m.Msg)
		copy(dAtA[i:], m.Msg)
		i = encodeVarintHomeassistant(dAtA, i, uint64(len(m.Msg)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintHomeassistant(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *StatesReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StatesReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StatesReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *StatesData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StatesData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StatesData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.States) > 0 {
		i -= len(m.States)
		copy(dAtA[i:], m.States)
		i = encodeVarintHomeassistant(dAtA, i, uint64(len(m.States)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StatesRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StatesRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StatesRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Msg) > 0 {
		i -= len(m.Msg)
		copy(dAtA[i:], m.Msg)
		i = encodeVarintHomeassistant(dAtA, i, uint64(len(m.Msg)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintHomeassistant(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintHomeassistant(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintHomeassistant(dAtA []byte, offset int, v uint64) int {
	offset -= sovHomeassistant(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CallReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovHomeassistant(uint64(l))
	}
	l = len(m.Home)
	if l > 0 {
		n += 1 + l + sovHomeassistant(uint64(l))
	}
	return n
}

func (m *CallRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovHomeassistant(uint64(m.Code))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovHomeassistant(uint64(l))
	}
	return n
}

func (m *ServicesReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ServicesData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Services)
	if l > 0 {
		n += 1 + l + sovHomeassistant(uint64(l))
	}
	return n
}

func (m *ServicesRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovHomeassistant(uint64(m.Code))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovHomeassistant(uint64(l))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovHomeassistant(uint64(l))
	}
	return n
}

func (m *StatesReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *StatesData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.States)
	if l > 0 {
		n += 1 + l + sovHomeassistant(uint64(l))
	}
	return n
}

func (m *StatesRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovHomeassistant(uint64(m.Code))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovHomeassistant(uint64(l))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovHomeassistant(uint64(l))
	}
	return n
}

func sovHomeassistant(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozHomeassistant(x uint64) (n int) {
	return sovHomeassistant(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CallReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHomeassistant
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CallReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CallReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHomeassistant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHomeassistant
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHomeassistant
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Home", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHomeassistant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHomeassistant
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHomeassistant
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Home = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHomeassistant(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHomeassistant
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CallRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHomeassistant
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CallRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CallRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHomeassistant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHomeassistant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHomeassistant
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHomeassistant
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHomeassistant(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHomeassistant
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServicesReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHomeassistant
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServicesReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServicesReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipHomeassistant(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHomeassistant
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServicesData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHomeassistant
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: servicesData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: servicesData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Services", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHomeassistant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHomeassistant
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHomeassistant
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Services = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHomeassistant(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHomeassistant
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServicesRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHomeassistant
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServicesRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServicesRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHomeassistant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHomeassistant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHomeassistant
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHomeassistant
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHomeassistant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHomeassistant
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHomeassistant
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &ServicesData{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHomeassistant(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHomeassistant
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StatesReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHomeassistant
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StatesReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StatesReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipHomeassistant(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHomeassistant
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StatesData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHomeassistant
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: statesData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: statesData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field States", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHomeassistant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHomeassistant
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHomeassistant
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.States = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHomeassistant(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHomeassistant
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StatesRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHomeassistant
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StatesRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StatesRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHomeassistant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHomeassistant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHomeassistant
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHomeassistant
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &StatesData{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHomeassistant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHomeassistant
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHomeassistant
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHomeassistant(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHomeassistant
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipHomeassistant(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowHomeassistant
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHomeassistant
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHomeassistant
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthHomeassistant
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupHomeassistant
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthHomeassistant
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthHomeassistant        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowHomeassistant          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupHomeassistant = fmt.Errorf("proto: unexpected end of group")
)
