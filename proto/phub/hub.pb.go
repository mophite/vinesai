// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/phub/hub.proto

package phub

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	ava "vinesai/internel/ava"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ChatReq struct {
	// 用户语音转文字询问chatgpt内容
	Message    string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	DevicesIds []string `protobuf:"bytes,2,rep,name=devicesIds,proto3" json:"devicesIds,omitempty"`
	HomeId     string   `protobuf:"bytes,3,opt,name=homeId,proto3" json:"homeId,omitempty"`
	// 历史记录
	ChatHistory []*ChatHistory `protobuf:"bytes,4,rep,name=chat_history,json=chatHistory,proto3" json:"chat_history,omitempty"`
}

func (m *ChatReq) Reset()         { *m = ChatReq{} }
func (m *ChatReq) String() string { return proto.CompactTextString(m) }
func (*ChatReq) ProtoMessage()    {}
func (*ChatReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_18e1e6df02346eb0, []int{0}
}
func (m *ChatReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChatReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChatReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChatReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChatReq.Merge(m, src)
}
func (m *ChatReq) XXX_Size() int {
	return m.Size()
}
func (m *ChatReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ChatReq.DiscardUnknown(m)
}

var xxx_messageInfo_ChatReq proto.InternalMessageInfo

func (m *ChatReq) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *ChatReq) GetDevicesIds() []string {
	if m != nil {
		return m.DevicesIds
	}
	return nil
}

func (m *ChatReq) GetHomeId() string {
	if m != nil {
		return m.HomeId
	}
	return ""
}

func (m *ChatReq) GetChatHistory() []*ChatHistory {
	if m != nil {
		return m.ChatHistory
	}
	return nil
}

type ChatHistory struct {
	// 截取需要内容
	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	// chatgpt返回内容
	Resp string `protobuf:"bytes,3,opt,name=resp,proto3" json:"resp,omitempty"`
}

func (m *ChatHistory) Reset()         { *m = ChatHistory{} }
func (m *ChatHistory) String() string { return proto.CompactTextString(m) }
func (*ChatHistory) ProtoMessage()    {}
func (*ChatHistory) Descriptor() ([]byte, []int) {
	return fileDescriptor_18e1e6df02346eb0, []int{1}
}
func (m *ChatHistory) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChatHistory) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChatHistory.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChatHistory) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChatHistory.Merge(m, src)
}
func (m *ChatHistory) XXX_Size() int {
	return m.Size()
}
func (m *ChatHistory) XXX_DiscardUnknown() {
	xxx_messageInfo_ChatHistory.DiscardUnknown(m)
}

var xxx_messageInfo_ChatHistory proto.InternalMessageInfo

func (m *ChatHistory) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *ChatHistory) GetResp() string {
	if m != nil {
		return m.Resp
	}
	return ""
}

type ChatData struct {
	// 机器人语音提示内容
	Tip string `protobuf:"bytes,1,opt,name=tip,proto3" json:"tip,omitempty"`
	// 截取需要内容
	Exp string `protobuf:"bytes,2,opt,name=exp,proto3" json:"exp,omitempty"`
	// chatgpt返回内容
	Resp string `protobuf:"bytes,3,opt,name=resp,proto3" json:"resp,omitempty"`
}

func (m *ChatData) Reset()         { *m = ChatData{} }
func (m *ChatData) String() string { return proto.CompactTextString(m) }
func (*ChatData) ProtoMessage()    {}
func (*ChatData) Descriptor() ([]byte, []int) {
	return fileDescriptor_18e1e6df02346eb0, []int{2}
}
func (m *ChatData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChatData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChatData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChatData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChatData.Merge(m, src)
}
func (m *ChatData) XXX_Size() int {
	return m.Size()
}
func (m *ChatData) XXX_DiscardUnknown() {
	xxx_messageInfo_ChatData.DiscardUnknown(m)
}

var xxx_messageInfo_ChatData proto.InternalMessageInfo

func (m *ChatData) GetTip() string {
	if m != nil {
		return m.Tip
	}
	return ""
}

func (m *ChatData) GetExp() string {
	if m != nil {
		return m.Exp
	}
	return ""
}

func (m *ChatData) GetResp() string {
	if m != nil {
		return m.Resp
	}
	return ""
}

type ChatRsp struct {
	Code int32     `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string    `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data *ChatData `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *ChatRsp) Reset()         { *m = ChatRsp{} }
func (m *ChatRsp) String() string { return proto.CompactTextString(m) }
func (*ChatRsp) ProtoMessage()    {}
func (*ChatRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_18e1e6df02346eb0, []int{3}
}
func (m *ChatRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChatRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChatRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChatRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChatRsp.Merge(m, src)
}
func (m *ChatRsp) XXX_Size() int {
	return m.Size()
}
func (m *ChatRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_ChatRsp.DiscardUnknown(m)
}

var xxx_messageInfo_ChatRsp proto.InternalMessageInfo

func (m *ChatRsp) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *ChatRsp) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *ChatRsp) GetData() *ChatData {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*ChatReq)(nil), "phub.ChatReq")
	proto.RegisterType((*ChatHistory)(nil), "phub.chatHistory")
	proto.RegisterType((*ChatData)(nil), "phub.chatData")
	proto.RegisterType((*ChatRsp)(nil), "phub.ChatRsp")
}

func init() { proto.RegisterFile("proto/phub/hub.proto", fileDescriptor_18e1e6df02346eb0) }

var fileDescriptor_18e1e6df02346eb0 = []byte{
	// 305 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x91, 0xb1, 0x4e, 0xc3, 0x30,
	0x10, 0x86, 0xe3, 0x26, 0xb4, 0xf4, 0x0a, 0x08, 0x2c, 0x84, 0x2c, 0x06, 0xab, 0x8a, 0x84, 0xd4,
	0x85, 0x56, 0x0a, 0x6c, 0x4c, 0x14, 0x06, 0xba, 0x9a, 0x07, 0x40, 0x4e, 0x62, 0xc5, 0x11, 0x8a,
	0x62, 0x62, 0x17, 0x95, 0xb7, 0x80, 0xb7, 0x62, 0xec, 0xc8, 0x88, 0x92, 0x17, 0x41, 0x76, 0x52,
	0x91, 0x01, 0xb1, 0xdd, 0x77, 0x7f, 0xee, 0xff, 0x2f, 0x67, 0x38, 0x55, 0x55, 0x69, 0xca, 0x85,
	0x92, 0xeb, 0x78, 0x21, 0xd7, 0xf1, 0xdc, 0x21, 0x0e, 0x2c, 0x87, 0x1f, 0x08, 0x46, 0x77, 0x92,
	0x1b, 0x26, 0x5e, 0x30, 0x81, 0x51, 0x21, 0xb4, 0xe6, 0x99, 0x20, 0x68, 0x8a, 0x66, 0x63, 0xb6,
	0x43, 0x4c, 0x01, 0x52, 0xf1, 0x9a, 0x27, 0x42, 0xaf, 0x52, 0x4d, 0x06, 0x53, 0x7f, 0x36, 0x66,
	0xbd, 0x0e, 0x3e, 0x83, 0xa1, 0x2c, 0x0b, 0xb1, 0x4a, 0x89, 0xef, 0x06, 0x3b, 0xc2, 0xd7, 0x70,
	0x90, 0x48, 0x6e, 0x9e, 0x64, 0xae, 0x4d, 0x59, 0xbd, 0x91, 0x60, 0xea, 0xcf, 0x26, 0xd1, 0xc9,
	0xdc, 0x46, 0xcf, 0xad, 0xf2, 0xd0, 0x0a, 0x6c, 0xd2, 0x83, 0xf0, 0x06, 0xfa, 0xf8, 0xcf, 0x5a,
	0x18, 0x82, 0x4a, 0x68, 0xd5, 0x85, 0xba, 0x3a, 0x5c, 0xc2, 0xbe, 0x1d, 0xbe, 0xe7, 0x86, 0xe3,
	0x63, 0xf0, 0x4d, 0xae, 0xba, 0x29, 0x5b, 0xda, 0x8e, 0xd8, 0x28, 0x32, 0x68, 0x3b, 0x62, 0xa3,
	0xfe, 0xf4, 0x78, 0xec, 0x6e, 0xa2, 0x9d, 0x9c, 0x94, 0x69, 0x9b, 0xbc, 0xc7, 0x5c, 0x6d, 0x4d,
	0x0a, 0x9d, 0xed, 0x4c, 0x0a, 0x9d, 0xe1, 0x10, 0x82, 0x94, 0x1b, 0xee, 0x4c, 0x26, 0xd1, 0xd1,
	0xef, 0xff, 0xd9, 0x35, 0x98, 0xd3, 0xa2, 0x4b, 0x08, 0xac, 0x29, 0xbe, 0x00, 0xff, 0x56, 0x3f,
	0xe3, 0xc3, 0xf6, 0xa3, 0xee, 0xf6, 0xe7, 0x7d, 0xd4, 0x2a, 0xf4, 0x96, 0xe4, 0xb3, 0xa6, 0x68,
	0x5b, 0x53, 0xf4, 0x5d, 0x53, 0xf4, 0xde, 0x50, 0x6f, 0xdb, 0x50, 0xef, 0xab, 0xa1, 0x5e, 0x3c,
	0x74, 0xef, 0x77, 0xf5, 0x13, 0x00, 0x00, 0xff, 0xff, 0xa0, 0x3e, 0xad, 0x72, 0xd7, 0x01, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ ava.Service

// This is a compile-time assertion to ensure that this generated file
// is compatible with the ava package it is being compiled against.
const _ = ava.SupportPackageIsVersion1

type ChatClient interface {
	Ask(c *ava.Context, req *ChatReq, opts ...ava.InvokeOptions) (*ChatRsp, error)
}

type chatClient struct {
	c *ava.Client
}

func NewChatClient() ChatClient {
	return &chatClient{c: ava.AvaClient()}
}

func (cc *chatClient) Ask(c *ava.Context, req *ChatReq, opts ...ava.InvokeOptions) (*ChatRsp, error) {
	rsp := &ChatRsp{}
	err := cc.c.InvokeRR(c, "/chat/ask", req, rsp, opts...)
	return rsp, err
}

// ChatServer is the server API for Chat ava.
type ChatServer interface {
	Ask(c *ava.Context, req *ChatReq, rsp *ChatRsp)
}

func RegisterChatServer(h ChatServer) {
	var r = &chatHandler{h: h}
	ava.AvaServer().RegisterHandler("/"+ava.AvaServer().Name()+"/chat/ask", r.Ask)
}

type chatHandler struct {
	h ChatServer
}

func (r *chatHandler) Ask(c *ava.Context, req *ava.Packet, interrupt ava.Interceptor) (rsp proto.Message, err error) {
	var in ChatReq
	err = c.Codec().Decode(req.Bytes(), &in)
	if err != nil {
		c.Errorf("server decode packet err=%v |method=%s |data=%s", err, c.Metadata.Method(), req.String())
		return nil, err
	}
	var out = ChatRsp{}
	if interrupt == nil {
		r.h.Ask(c, &in, &out)
		return &out, err
	}
	f := func(c *ava.Context, req proto.Message) proto.Message {
		r.h.Ask(c, req.(*ChatReq), &out)
		return &out
	}
	return interrupt(c, &in, f)
}

func (m *ChatReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChatReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChatReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChatHistory) > 0 {
		for iNdEx := len(m.ChatHistory) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ChatHistory[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintHub(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.HomeId) > 0 {
		i -= len(m.HomeId)
		copy(dAtA[i:], m.HomeId)
		i = encodeVarintHub(dAtA, i, uint64(len(m.HomeId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.DevicesIds) > 0 {
		for iNdEx := len(m.DevicesIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.DevicesIds[iNdEx])
			copy(dAtA[i:], m.DevicesIds[iNdEx])
			i = encodeVarintHub(dAtA, i, uint64(len(m.DevicesIds[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintHub(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ChatHistory) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChatHistory) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChatHistory) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Resp) > 0 {
		i -= len(m.Resp)
		copy(dAtA[i:], m.Resp)
		i = encodeVarintHub(dAtA, i, uint64(len(m.Resp)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintHub(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ChatData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChatData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChatData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Resp) > 0 {
		i -= len(m.Resp)
		copy(dAtA[i:], m.Resp)
		i = encodeVarintHub(dAtA, i, uint64(len(m.Resp)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Exp) > 0 {
		i -= len(m.Exp)
		copy(dAtA[i:], m.Exp)
		i = encodeVarintHub(dAtA, i, uint64(len(m.Exp)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Tip) > 0 {
		i -= len(m.Tip)
		copy(dAtA[i:], m.Tip)
		i = encodeVarintHub(dAtA, i, uint64(len(m.Tip)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ChatRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChatRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChatRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintHub(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Msg) > 0 {
		i -= len(m.Msg)
		copy(dAtA[i:], m.Msg)
		i = encodeVarintHub(dAtA, i, uint64(len(m.Msg)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintHub(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintHub(dAtA []byte, offset int, v uint64) int {
	offset -= sovHub(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ChatReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovHub(uint64(l))
	}
	if len(m.DevicesIds) > 0 {
		for _, s := range m.DevicesIds {
			l = len(s)
			n += 1 + l + sovHub(uint64(l))
		}
	}
	l = len(m.HomeId)
	if l > 0 {
		n += 1 + l + sovHub(uint64(l))
	}
	if len(m.ChatHistory) > 0 {
		for _, e := range m.ChatHistory {
			l = e.Size()
			n += 1 + l + sovHub(uint64(l))
		}
	}
	return n
}

func (m *ChatHistory) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovHub(uint64(l))
	}
	l = len(m.Resp)
	if l > 0 {
		n += 1 + l + sovHub(uint64(l))
	}
	return n
}

func (m *ChatData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Tip)
	if l > 0 {
		n += 1 + l + sovHub(uint64(l))
	}
	l = len(m.Exp)
	if l > 0 {
		n += 1 + l + sovHub(uint64(l))
	}
	l = len(m.Resp)
	if l > 0 {
		n += 1 + l + sovHub(uint64(l))
	}
	return n
}

func (m *ChatRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovHub(uint64(m.Code))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovHub(uint64(l))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovHub(uint64(l))
	}
	return n
}

func sovHub(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozHub(x uint64) (n int) {
	return sovHub(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ChatReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHub
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChatReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChatReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHub
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHub
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevicesIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHub
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHub
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DevicesIds = append(m.DevicesIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HomeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHub
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHub
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HomeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatHistory", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHub
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHub
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChatHistory = append(m.ChatHistory, &ChatHistory{})
			if err := m.ChatHistory[len(m.ChatHistory)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHub(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHub
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChatHistory) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHub
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: chatHistory: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: chatHistory: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHub
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHub
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHub
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHub
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Resp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHub(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHub
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChatData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHub
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: chatData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: chatData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHub
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHub
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHub
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHub
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Exp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHub
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHub
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Resp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHub(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHub
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChatRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHub
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChatRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChatRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHub
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHub
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Categories", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHub
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHub
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &ChatData{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHub(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHub
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipHub(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowHub
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHub
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHub
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthHub
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupHub
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthHub
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthHub        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowHub          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupHub = fmt.Errorf("proto: unexpected end of group")
)
